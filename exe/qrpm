#!/usr/bin/env ruby

#$LOAD_PATH.unshift "/home/clr/prj/shellopts/lib"

require_relative '../lib/qrpm/qrpm.rb'
require_relative '../lib/qrpm.rb'

require 'yaml'
require 'shellopts'

# TODO
#   o Fix BuildRoot (contains absolute path)
#
#   + Separate standard variables from user-variables in dump
#   + Enable escape of $
#   + Support for $(...) constructs

begin
  SPEC = %(
    @ Make simple RPMs simple

    -- VARIABLE=VALUE... [QRPM-FILE]

    'qrpm' creates a RPM package from a qrpm.yml specification file. It aims at
    packaging shell scripts or simple executables/libraries with minimum effort

    The qrpm.yml specification file is a YAML file. The simplest qrpm file
    contains just one line:

      $bindir: my_executable_script

    Running qrpm using this file will yield a RPM package that installs the
    script into the standard /usr/bin directory. The name of the package
    is set to the name of the current directory and version to the latest tag
    in git (which needs to be present). Other defaults are detailed below

    VARIABLES 

    The configuration file can define and use variables. They are defined by
    key/value definitions and the value can refer to values of other
    variables using $NAME or ${NAME}. Variables can also be given on the
    command line in <variable>=<value> format

    $(...) constructs are commands that are executed by bash(1). The parser
    considers everything from the opening '$(' to the last ')' on the line as
    part of the command so only one command is allowed. This restriction keeps
    the parser simple, it may change in the future

    INCLUDE FILES

    The qrpm file can include other files that are searched for in a list of
    directories. Relative paths are relative to the directory of the qrpm file
    (but see the -C option). The search directories can be set on the command
    line using the -I option

    BUILT-IN VARIABLES

    There are the following built-in variables. They are listed below with their 
    default values:

      rootdir         /
      rootconfdir     /etc
      rootexecdir     /usr
      rootlibdir      /usr
      rootconstdir    /usr/share
      rootdocdir      /usr/share
      rootdatadir     /var

      sysetcdir       /etc
      sysbindir       /usr/bin
      syssbindir      /usr/sbin
      syslibdir       /usr/lib64
      syslibexecdir   /usr/libexec
      syssharedir     /usr/share
      sysdocdir       /usr/share/doc
      sysvardir       /var/lib
      sysspooldir     /var/spool
      sysrundir       /var/run
      syslockdir      /var/lock
      syscachedir     /var/cache
      syslogdir       /var/log
      systmpdir       /tmp

      pcketcdir       /etc/NAME
      pckbindir       /usr/bin
      pcksbindir      /usr/sbin
      pcklibdir       /usr/lib64/NAME
      pcklibexecdir   /usr/libexec/NAME
      pcksharedir     /usr/share/NAME
      pckdocdir       /usr/share/doc/NAME
      pckvardir       /var/NAME
      pckspooldir     /var/spool/NAME
      pckrundir       /var/run/NAME
      pcklockdir      /var/lock/NAME
      pckcachedir     /var/cache/NAME
      pcklogdir       /var/log/NAME
      pcktmpdir       /tmp/NAME

    Note that there are no package specific directories for bin and sbin

    INSTALLATION DIRECTORIES

    OPTIONS

    -f,force
      Create package even if repository is dirty. Normally qrpm checks if the
      current directory is clean

    -C,directory=EDIR
      Change to directory before doing anything else but include the current
      directory in the search path. This makes it possible to override parts of
      a spec file

    +I,include=EDIR
      Include directory, later definitions are searched first

    -s,spec=OFILE?
      Only create the spec file and not the RPM package. Use this option to
      inspect what RPM is going to do

    -S,source
      Create a source RPM file instead of a regular RPM file

    -t,template=OFILE?
      Generate a QRPM template. It is in YAML format with the extension that a
      single '__END__' terminates the file immediately. The name of the file
      defaults to 'qrpm.yml'. It is an error if the file exists

    -T,force-template=OFILE?
      Like --template but overwrites file if it exists

    -b,builddir=NPATH?
      Use the given path as the RPM build dir, default is 'builddir'. Doesn't
      remove the directory afterwards. It it is an error if the directory exists

    -B,force-builddir=PATH?
      Like --builddir but overwrites the directory if it exists beforehand

    -d,dump
      Dump internal data and exit. For debug

    COMMANDS
      show! -- QRPM-FILE VARIABLE...
        Output the value of a variable. Typically used to extract the version
        number from a qrpm.yml file
  )

  opts, args = ShellOpts.process(SPEC, ARGV, verbose: true, quiet: true)

  if opts.template? || opts.force_template?
    outfile = opts.template || opts.force_template || Qrpm::QRPM_CONFIG_FILE
    opts.force_template? || !File.exists?(outfile) or ShellOpts.error "Won't overwrite existing file: #{outfile}"
    FileUtils::cp Qrpm::QRPM_CONFIG_FILE_TEMPLATE, outfile
    puts "Generated #{outfile}" if !opts.quiet?
    exit
  end

  # Process arguments. The overrides hash is constructed from var=val arguments
  # on the command line
  overrides = {}
  file = nil
  show = []
  while arg = args.extract(0..1)
    if arg =~ /^(.*?)=(.*)$/
      overrides[$1] = $2
    elsif file.nil?
      file = arg
    elsif opts.subcommand == :show!
      show << arg
    else
      args.expect(-1, "More than one file argument")
    end
  end
  args.expect(0)

  # Compute/normalize currdir and qrpmdir and add them to the dictionary
  currdir = overrides["currdir"] = File.expand_path(overrides["currdir"] || Dir.getwd)
  qrpmdir = overrides["qrpmdir"] = File.expand_path(overrides["qrpmdir"] || opts.directory || ".")

  # Check builddir (todo: also currdir?)
  File.directory?(currdir) or error "Can't find '#{currdir}'"
  File.directory?(qrpmdir) or error "Can't find '#{qrpmdir}'"

  # Compute builddir
  if opts.builddir? && opts.force_builddir?
    ShellOpts.error "Can't use both --builddir and --force-builddir"
  elsif opts.builddir? || opts.force_builddir? 
    builddir = opts.builddir || opts.force_builddir || "builddir"
    opts.force_builddir? || !File.exist?(builddir) or 
        ShellOpts.error "Build directory 'builddir' exists - use -B to override"
    builddir = File.expand_path(builddir)
  else
    builddir = nil
  end

  # Check if repository is clean
  opts.force? || opts.dump? || `cd #{qrpmdir}; git status --porcelain | grep -v '??' 2>/dev/null` == "" or 
      ShellOpts.error "Repository is dirty"

  # Check configuration file
  file ||= Qrpm::QRPM_CONFIG_FILE
  ::File.exist?(file) or ShellOpts.error "Can't find '#{file}'"

  # Create lexer
  lexer = Qrpm::Lexer.new([currdir, qrpmdir].uniq, opts.include.reverse)

  # Load the qrpm configuration file
  conf = lexer.lex(File.expand_path file)

  # Change to qrpm directory
  Dir.chdir(qrpmdir)

  # Parse QRPM configuration file. Include paths are still resolved with the
  # context of the original directory if -C is used while filesystem paths are
  # relative to the source directory
  compiler = Qrpm::Compiler.new(overrides)
  qrpm = compiler.compile(conf)
  rpm = qrpm.rpm

  if opts.subcommand == :show!
    for variable in show
      puts qrpm[variable].sub(/^\/\//, "/")
    end
    exit
  end

  if opts.dump?
    puts "Compiler"
    indent { compiler.dump }

    puts "Qrpm"
    indent { qrpm.dump_parts }

    puts "Rpm"
    indent { rpm.dump }

    exit
  end

  # Create spec/srpm/rpm file
  target = (opts.spec? ? :spec : (opts.source? ? :srpm : :rpm))
  files = rpm.build(
      target: target, 
      file: opts.spec, 
      verbose: opts.verbose?, 
      destdir: currdir, 
      builddir: builddir)

  puts "Built #{files.map { |f| File.basename(f) }.join(" ")}" if !opts.quiet?

rescue RuntimeError => ex
  ShellOpts.failure ex.message
end

