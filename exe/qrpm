#!/usr/bin/env ruby

#$LOAD_PATH.unshift "/home/clr/prj/shellopts/lib"

require_relative '../lib/qrpm/qrpm.rb'
require_relative '../lib/qrpm.rb'

require 'yaml'
require 'shellopts'
require 'indented_io'

# TODO
#   o Fix BuildRoot (contains absolute path)
#   o Enable escape of $
#   o Separate standard variable from user-variables in dump

begin
  SPEC = %(
    @ Quick RPM builder

    'qrpm' creates a RPM package from a simple YAML specification file

    A template YAML qrpm configuration file can be generated by the --template
    option.  It is in YAML format with the extension that a single '__END__'
    terminates the file and that $NAME or ${NAME} are variables that will be
    expanded. The variables can either be specified in the configuration file
    or given on the command line in <variable>=<value> format

    -- VARIABLE=VALUE... [QRPM-FILE]

    -t,template=OFILE?
      Generate a template qrpm.yml file in the current directory. Customize it
      to create RPM packages of your project

    -s,spec=OFILE?
      Only create the spec file and not the RPM package. Use this option to
      inspect what RPM is going to do

    -S,source
      Create a source RPM file instead of a regular RPM file

    -f,force
      Create package even if repository is dirty. Normally qrpm checks if the
      current directory is a Git directory and then if there are no changed
      files

    -C,directory=EDIR
      Change to directory before doing anything else. Output files are still
      created in the current directory, though

    -d,dump
      Dump internal data and exit. For debug
  )

  opts, args = ShellOpts.process(SPEC, ARGV, verbose: true)

  currdir = Dir.getwd
  Dir.chdir(opts.directory) if opts.directory?

  if opts.template?
    outfile = opts.template || Qrpm::QRPM_CONFIG_FILE
    FileUtils::cp Qrpm::QRPM_CONFIG_FILE_TEMPLATE, outfile
    exit
  end

  # Collect var=val settings into the dict hash and sets the configuration file
  # if present
  dict = {}
  while arg = args.extract(0..1)
    if arg =~ /^(.*?)=(.*)$/
      dict[$1] = $2
    else
      file = arg
      break
    end
  end
  args.empty? or args.expect(0) # Generates an illegal-number-of-arguments error

  # Check configuration file
  file ||= Qrpm::QRPM_CONFIG_FILE
  ::File.exist?(file) or raise "Can't find '#{file}'"

  # Load the qrpm configuration file
  yaml = YAML.load(IO.read(file).sub(/^__END__\s*$/m, ""))

  # Parse QRPM file
  rpm = Qrpm::Parser.parse(dict, yaml)

  if opts.dump?
    rpm.dump
    exit
  end

  # Check if repository is clean
  opts.force? || `git status --porcelain 2>/dev/null` == "" or raise "Repository is dirty"

  target = (opts.spec? ? :spec : (opts.source? ? :srpm : :rpm))
  rpm.build(target: target, file: opts.spec, verbose: opts.verbose?, destdir: currdir)

rescue RuntimeError => ex
  ShellOpts.error ex.message
end

